package models

import (
	"crypto/ecdsa"
	"errors"

	"github.com/dappley/go-dappley/crypto/keystore/secp256k1"
)

type DIDDocument struct {
	Context            []string             `json:"@context"`
	ID                 string               `json:"id"`
	Created            string               `json:"created"`
	Updated            string               `json:"updated"`
	Version            int                  `json:"version"`
	VerificationMethod []VerificationMethod `json:"verificationMethod"`
	Authentication     string               `json:"authentication"`
	Service            []Service            `json:"service"`
}

type VerificationMethod struct {
	ID           string `json:"id"`
	MethodType   string `json:"type" mapstructure:"type"`
	Controller   string `json:"controller"`
	MultibaseKey string `json:"publicKeyMultibase" mapstructure:"publicKeyMultibase"`
}

type ResolutionOptions struct {
	Accept string `json:"accept"`
}

type RepresentationResolutionOptions struct {
	Accept string `json:"accept"`
}

type ResolutionMetadata struct {
	Error string `json:"error"`
}

type RepresentationResolutionMetadata struct {
	ContentType string `json:"contentType"`
	Error       string `json:"error"`
}

type DocumentMetadata struct {
	Created       string   `json:"created"`
	Updated       string   `json:"updated"`
	Deactivated   string   `json:"deactivated"`
	NextUpdate    string   `json:"nextUpdate"`
	VersionID     string   `json:"versionId"`
	NextVersionID string   `json:"nextVersionId"`
	EquivalentID  []string `json:"equivalentId"`
	CanonicalID   string   `json:"canonicalId"`
}

type VerifiableCredential struct {
	Context           []string    `json:"@context"`
	Type              []string    `json:"type"`
	Issuer            string      `json:"issuer"`
	IssuanceDate      string      `json:"issuanceDate"`
	ExpirationDate    string      `json:"expirationDate"`
	Description       string      `json:"description"`
	CredentialSubject SubjectInfo `json:"credentialSubject"`
	Proof             VCProof     `json:"proof"`
}

//This can be a type of input form to set up the VC.
//Temp fields here currently, will be changed in the future
type SubjectInfo struct {
	ID           string   `json:"id"`
	Type         []string `json:"type"`
	GivenName    string   `json:"givenName"`
	FamilyName   string   `json:"familyName"`
	Gender       string   `json:"gender"`
	BirthCountry string   `json:"birthCountry"`
	BirthDate    string   `json:"birthName"`
}

type VCProof struct {
	Type               string `json:"type"`
	Created            string `json:"created"`
	VerificationMethod string `json:"verificationMethod"`
	ProofPurpose       string `json:"proofPurpose"`
	JWSSignature       string `json:"jws"` //signature is created from a hash of the VC
}

type VPProof struct {
	Type               string `json:"type"`
	Created            string `json:"created"`
	VerificationMethod string `json:"verificationMethod"`
	ProofPurpose       string `json:"proofPurpose"`
	JWSSignature       string `json:"jws"`   //signature is created from a hash of the VP
	Nonce              string `json:"nonce"` //random value generated by verifier that must be included in proof
}

type VerifiablePresentation struct {
	Context              []string               `json:"context"`
	Type                 []string               `json:"type"`
	VerifiableCredential []VerifiableCredential `json:"verifiableCredential"`
	Holder               string                 `json:"holder"`
	Proof                VPProof                `json:"proof"`
}

type Service struct {
	ID              string `json:"id"`
	Type            string `json:"type"`
	ServiceEndpoint string `json:"serviceEndpoint"`
}

func CreateDIDDocument() *DIDDocument {
	return &DIDDocument{}
}

func (doc DIDDocument) RetrieveVerificationMethod(vmID string) (VerificationMethod, error) {
	for _, vm := range doc.VerificationMethod {
		if vm.ID == vmID {
			return vm, nil
		}
	}
	return VerificationMethod{}, errors.New("failed to find verification method with ID " + vmID)
}

func (doc *DIDDocument) AddService(service Service) {
	doc.Service = append(doc.Service, service)
}

func CreateVerifiableCredential() *VerifiableCredential {
	return &VerifiableCredential{}
}

func NewVerifiableCredential(context, vctype []string, issuer, issuanceDate, expirationDate, description string, subject SubjectInfo, proof VCProof) *VerifiableCredential {
	return &VerifiableCredential{
		Context:           context,
		Type:              vctype,
		Issuer:            issuer,
		IssuanceDate:      issuanceDate,
		ExpirationDate:    expirationDate,
		Description:       description,
		CredentialSubject: subject,
		Proof:             proof,
	}
}

func CreateSubjectInfo() *SubjectInfo {
	return &SubjectInfo{}
}

func CreateVCProof() *VCProof {
	return &VCProof{}
}

func CreateVPProof() *VPProof {
	return &VPProof{}
}

func CreateResolutionOptions() *ResolutionOptions {
	return &ResolutionOptions{}
}

func CreatePresentation() *VerifiablePresentation {
	return &VerifiablePresentation{}
}

func NewPresentation(context, presentationType []string, credentials []VerifiableCredential, holder string, proof VPProof) *VerifiablePresentation {
	return &VerifiablePresentation{
		Context:              context,
		Type:                 presentationType,
		VerifiableCredential: credentials,
		Holder:               holder,
		Proof:                proof,
	}
}

func GenerateTestPrivKey() *ecdsa.PrivateKey {
	privKey, _ := secp256k1.ToECDSAPrivateKey([]byte{165, 190, 153, 12, 246, 178, 211, 170, 147, 144, 51, 73, 48, 27, 20, 79, 61, 110, 201, 118, 99, 219, 50, 252, 135, 12, 107, 237, 245, 95, 170, 17})
	return privKey
}

func GenerateTestDIDDocument() *DIDDocument {
	document := CreateDIDDocument()
	document.Context = append(document.Context, "https://w3id.org/did/v1")
	document.Context = append(document.Context, "https://ns.did.ai/suites/secp256k1-2019/v1/")
	document.ID = "did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo"
	document.Created = "2022-03-31T12:53:19-07:00"
	document.Updated = "2022-03-31T12:53:19-07:00"
	document.Version = 1
	document.VerificationMethod = append(document.VerificationMethod, VerificationMethod{ID: "did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo#verification", MethodType: "EcdsaSecp256k1VerificationKey2019", Controller: "did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo", MultibaseKey: "zR4TQJaWaLA3vvYukULRJoxTsRmqCMsWuEJdDE8CJwRFCUijDGwCBP89xVcWdLRQaEM6b7wD294xCs8byy3CdDMYa"})
	document.Authentication = "did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo#verification"
	return document
}

func NewSubjectInfo(id string, subjectType []string, givenName, familyName, gender, birthCountry, birthDate string) *SubjectInfo {
	return &SubjectInfo{
		ID:           id,
		Type:         subjectType,
		GivenName:    givenName,
		FamilyName:   familyName,
		Gender:       gender,
		BirthCountry: birthCountry,
		BirthDate:    birthDate,
	}
}

func GenerateTestSubjectInfo() *SubjectInfo {
	return NewSubjectInfo(
		"did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo",
		[]string{"sampleType"},
		"John",
		"Jacobs",
		"Male",
		"Canada",
		"2022-03-22",
	)
}

func NewVCProof(proofType, created, vm, purpose, sig string) *VCProof {
	return &VCProof{
		Type:               proofType,
		Created:            created,
		VerificationMethod: vm,
		ProofPurpose:       purpose,
		JWSSignature:       sig,
	}
}

func NewVPProof(proofType, created, vm, purpose, sig, nonce string) *VPProof {
	return &VPProof{
		Type:               proofType,
		Created:            created,
		VerificationMethod: vm,
		ProofPurpose:       purpose,
		JWSSignature:       sig,
		Nonce:              nonce,
	}
}

func GenerateTestVC() *VerifiableCredential {
	vcProof := NewVCProof(
		"EcdsaSecp256k1Signature2019",
		"2022-03-31T12:53:19-07:00",
		"did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo#verification",
		"Authentication",
		"eyJhbGciOiJFUzI1NiJ9..fg7dsbXPizy_k3JLUKPD3_BWS--ilpfCxZNX5gcju2cIar0eOZsmWef3IKP2HXa9fy9jbkcb9LKunmayN4wjKQ",
	)

	subjectInfo := GenerateTestSubjectInfo()

	return NewVerifiableCredential(
		[]string{"https://www.w3.org/2018/credentials/v1", "https://ns.did.ai/suites/secp256k1-2019/v1/"},
		[]string{"VerifiableCredential", "PermanentResidentCard"},
		"did:metablox:sampleIssuer",
		"2022-03-31T12:53:19-07:00",
		"2032-03-31T12:53:19-07:00",
		"Government of Example Permanent Resident Card",
		*subjectInfo,
		*vcProof,
	)
}

func CreateService() *Service {
	return &Service{}
}

func GenerateTestPresentation() *VerifiablePresentation {
	vpProof := NewVPProof(
		"EcdsaSecp256k1Signature2019",
		"2022-03-31T12:53:19-07:00",
		"did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo#verification",
		"Authentication",
		"eyJhbGciOiJFUzI1NiJ9..FRSk9qgX7-PJQS99sqcNL4eQnnLV8XElw5QsYpvd0fmds0lnsgdkzcHEPTMPn0OqRMEOe0cgJU6AThTBOA-X5Q",
		"sampleNonce",
	)

	return NewPresentation(
		[]string{"https://www.w3.org/2018/credentials/v1", "https://ns.did.ai/suites/secp256k1-2019/v1/"},
		[]string{"VerifiablePresentation"},
		[]VerifiableCredential{*GenerateTestVC()},
		"did:metablox:HFXPiudexfvsJBqABNmBp785YwaKGjo95kmDpBxhMMYo",
		*vpProof,
	)
}
